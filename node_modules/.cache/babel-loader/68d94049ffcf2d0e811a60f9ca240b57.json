{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonat\\\\OneDrive\\\\Desktop\\\\monsters-rolodex\\\\src\\\\App.js\";\nimport { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onSearchChange = event => {\n      const searchField = event.target.value.toLocaleLowerCase();\n      this.setState(() => {\n        // Return updated searchField.\n        return {\n          searchField\n        };\n      });\n    };\n\n    this.state = {\n      //array to store API request data. We do not change this array but create another var that saves the state state\n      monsters: [],\n      //User search input. Var is in state so we can use it outside of return\n      searchField: ''\n    };\n    console.log('constructor');\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount');\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState(() => {\n      return {\n        monsters: users\n      };\n    }));\n  } //component that runs when event is triggers by onChange in search bar\n\n\n  render() {\n    const {\n      monsters,\n      searchField\n    } = this.state;\n    const {\n      onSearchChange\n    } = this; // Keeps original array (monsters) untouched. An copy of monster w/ filter results as user inputs into search\n\n    const filterMonsters = monsters.filter(monster => {\n      // monster data being searched is changed to all lower case and saved in searchField\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"search-box\",\n        type: \"search\",\n        placeholder: \"search monsters\",\n        onChange: onSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardList, {\n        monsters: filterMonsters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","logo","CardList","App","constructor","onSearchChange","event","searchField","target","value","toLocaleLowerCase","setState","state","monsters","console","log","componentDidMount","fetch","then","response","json","users","render","filterMonsters","filter","monster","name","includes"],"sources":["C:/Users/Jonat/OneDrive/Desktop/monsters-rolodex/src/App.js"],"sourcesContent":["import {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      //array to store API request data. We do not change this array but create another var that saves the state state\n      monsters: [],  \n      //User search input. Var is in state so we can use it outside of return\n      searchField: '',    \n    };\n    console.log('constructor');\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount');\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => this.setState(() => {\n        return {monsters: users}\n      }\n      ));\n  }\n  //component that runs when event is triggers by onChange in search bar\n  onSearchChange = (event) => {\n    const searchField= event.target.value.toLocaleLowerCase();\n    this.setState(() => {\n      // Return updated searchField.\n      return {searchField};\n    });\n  }\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const {onSearchChange} = this;\n    // Keeps original array (monsters) untouched. An copy of monster w/ filter results as user inputs into search\n    const filterMonsters = monsters.filter((monster) => {\n      // monster data being searched is changed to all lower case and saved in searchField\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n    return (\n      <div className=\"App\">\n        <input className='search-box' type='search' placeholder='search monsters' onChange={onSearchChange} />\n        \n        <CardList monsters = {filterMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":";AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,4CAArB;;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;EAC1BI,WAAW,GAAG;IACZ;;IADY,KAsBdC,cAtBc,GAsBIC,KAAD,IAAW;MAC1B,MAAMC,WAAW,GAAED,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,iBAAnB,EAAnB;MACA,KAAKC,QAAL,CAAc,MAAM;QAClB;QACA,OAAO;UAACJ;QAAD,CAAP;MACD,CAHD;IAID,CA5Ba;;IAGZ,KAAKK,KAAL,GAAa;MACX;MACAC,QAAQ,EAAE,EAFC;MAGX;MACAN,WAAW,EAAE;IAJF,CAAb;IAMAO,OAAO,CAACC,GAAR,CAAY,aAAZ;EACD;;EAEDC,iBAAiB,GAAG;IAClBF,OAAO,CAACC,GAAR,CAAY,mBAAZ;IACAE,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,KAAD,IAAW,KAAKV,QAAL,CAAc,MAAM;MACnC,OAAO;QAACE,QAAQ,EAAEQ;MAAX,CAAP;IACD,CAFgB,CAFnB;EAMD,CArByB,CAsB1B;;;EASAC,MAAM,GAAG;IACP,MAAM;MAACT,QAAD;MAAWN;IAAX,IAA0B,KAAKK,KAArC;IACA,MAAM;MAACP;IAAD,IAAmB,IAAzB,CAFO,CAGP;;IACA,MAAMkB,cAAc,GAAGV,QAAQ,CAACW,MAAT,CAAiBC,OAAD,IAAa;MAClD;MACA,OAAOA,OAAO,CAACC,IAAR,CAAahB,iBAAb,GAAiCiB,QAAjC,CAA0CpB,WAA1C,CAAP;IACD,CAHsB,CAAvB;IAIA,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBACE;QAAO,SAAS,EAAC,YAAjB;QAA8B,IAAI,EAAC,QAAnC;QAA4C,WAAW,EAAC,iBAAxD;QAA0E,QAAQ,EAAEF;MAApF;QAAA;QAAA;QAAA;MAAA,QADF,eAGE,QAAC,QAAD;QAAU,QAAQ,EAAIkB;MAAtB;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAOD;;AA9CyB;;AAiD5B,eAAepB,GAAf"},"metadata":{},"sourceType":"module"}